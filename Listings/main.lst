C251 COMPILER V5.60.0,  main                                                               26/07/24  19:26:12  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\software\keilc51\C251\BIN\C251.EXE Sources\User\main.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4,SP
                    -EED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12
                    -K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          
    2          /*
    3           * FreeRTOS STC port V1.0.2
    4           * 
    5           * STC32G12K128功能简介：
    6           *    2组 CAN, 3组Lin, USB, 32位 8051, RMB5,
    7           *    高精准12位ADC, DMA 支持(TFT彩屏, ADC, 4组串口, SPI, I2C )
    8           *  
    9           *  各位用户在后续的使用过程中，如果发现有不正确的地方或者
   10           *  有可改善的地方，请和STC联系，由STC官方进行统一修改并更新版本
   11           *
   12           *  若您的代码或文章中需要引用本程序包中的部分移植代码，请在您的
   13           *  代码或文章中注明参考或使用了STC的FreeRTOS的移植代码
   14          */
   15          
   16          #include "FreeRTOS.h"
   17          #include "task.h"
   18          #include "System_init.h"
   19          
   20          // #include "display.h"
   21          // #include "rtc.h"
   22          // #include "ntc.h"
   23          // #include "adckey.h"
   24          // #include "uart2_3.h"
   25          // #include "MatrixKey.h"
   26          // #include "i2c_ps.h"
   27          // #include "pwmb.h"
   28          #include "mzqGlobal.h"
   29          #include "Semphr.h"
   30          #include "STC32G_UART.h"
   31          void vSystemInit( void );
   32          void motorInit(void);
   33          extern void outputSpeed(void *pvParameters);
   34          extern void PWMupdate(void *pvParameters);
   35          extern QueueHandle_t pwmUpdateSignal;
   36          extern void openMVgetAngle(void *pvParameters);
   37          extern void moudle8266(void *pvParameters);
   38          
   39          void main( void )
   40          {
   41   1          /* 系统初始化 */
   42   1          vSystemInit();
   43   1          motorInit();
   44   1          PidInit(&pid1);
   45   1          PidInit(&pid2);
   46   1          PidInit(&pidLoc);
   47   1          pid1.kp = 0.1;
   48   1          pid1.ki = 1;
   49   1          pid2.kp = 0.1;
   50   1          pid2.ki = 1;
   51   1          pidLoc.kp = 5;
   52   1          pwmUpdateSignal = xSemaphoreCreateBinary();
   53   1          /* 创建任务 */
   54   1          xTaskCreate((TaskFunction_t )outputSpeed,
   55   1                      (const char*    )"outputTIM",
   56   1                      (uint16_t       )configDEFAULT_STACK_SIZE,
   57   1                      (void*          )NULL,
C251 COMPILER V5.60.0,  main                                                               26/07/24  19:26:12  PAGE 2   

   58   1                      (UBaseType_t    )(configDEFAULT_PRIORITIES)+2,
   59   1                      (TaskHandle_t*  )NULL);
   60   1          xTaskCreate((TaskFunction_t )PWMupdate,
   61   1                      (const char*    )"PWMupdate",
   62   1                      (uint16_t       )configDEFAULT_STACK_SIZE,
   63   1                      (void*          )NULL,
   64   1                      (UBaseType_t    )(configDEFAULT_PRIORITIES)+3,
   65   1                      (TaskHandle_t*  )NULL);
   66   1          xTaskCreate((TaskFunction_t )openMVgetAngle,
   67   1                      (const char*    )"openMVgetAngle",
   68   1                      (uint16_t       )configDEFAULT_STACK_SIZE,
   69   1                      (void*          )NULL,
   70   1                      (UBaseType_t    )(configDEFAULT_PRIORITIES)+4,
   71   1                      (TaskHandle_t*  )NULL);
   72   1          xTaskCreate((TaskFunction_t )moudle8266,
   73   1                      (const char*    )"moudle8266",
   74   1                      (uint16_t       )configDEFAULT_STACK_SIZE,
   75   1                      (void*          )NULL,
   76   1                      (UBaseType_t    )(configDEFAULT_PRIORITIES)+4,
   77   1                      (TaskHandle_t*  )NULL);
   78   1          // xTaskCreate((TaskFunction_t )vDisplayTask,
   79   1          //             (const char*    )"DISPLAY",
   80   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
   81   1          //             (void*          )NULL,
   82   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES + 1),
   83   1          //             (TaskHandle_t*  )NULL);
   84   1          // xTaskCreate((TaskFunction_t )vRtcTask,
   85   1          //             (const char*    )"RTC",
   86   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
   87   1          //             (void*          )NULL,
   88   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES + 1),
   89   1          //             (TaskHandle_t*  )NULL);
   90   1          // xTaskCreate((TaskFunction_t )vAdcKeyTask,
   91   1          //             (const char*    )"ADCKEY",
   92   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
   93   1          //             (void*          )NULL,
   94   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
   95   1          //             (TaskHandle_t*  )NULL);
   96   1          // xTaskCreate((TaskFunction_t )vNtcTask,
   97   1          //             (const char*    )"NTC",
   98   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
   99   1          //             (void*          )NULL,
  100   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
  101   1          //             (TaskHandle_t*  )NULL);
  102   1          // xTaskCreate((TaskFunction_t )vUart2_3Task,
  103   1          //             (const char*    )"UART2_3",
  104   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
  105   1          //             (void*          )1000,  //注意pvParameters参数传地址或者立即数时只有低24位是有效位，最
             -高8位编译时会自动填0. 可通过变量或者常量传送32字节数据.
  106   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
  107   1          //             (TaskHandle_t*  )NULL);
  108   1          // xTaskCreate((TaskFunction_t )vMatrixKeyTask,
  109   1          //             (const char*    )"MatrixKey",
  110   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
  111   1          //             (void*          )NULL,
  112   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
  113   1          //             (TaskHandle_t*  )NULL);
  114   1          // xTaskCreate((TaskFunction_t )vI2C_PsTask,
  115   1          //             (const char*    )"I2C_PS",
  116   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
  117   1          //             (void*          )NULL,
  118   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
  119   1          //             (TaskHandle_t*  )NULL);
  120   1          // xTaskCreate((TaskFunction_t )vPWMB_LedTask,
  121   1          //             (const char*    )"PWMB_LED",
  122   1          //             (uint16_t       )configDEFAULT_STACK_SIZE,
C251 COMPILER V5.60.0,  main                                                               26/07/24  19:26:12  PAGE 3   

  123   1          //             (void*          )NULL,
  124   1          //             (UBaseType_t    )(configDEFAULT_PRIORITIES),
  125   1          //             (TaskHandle_t*  )NULL);
  126   1      
  127   1          /* 启动任务调度器开始任务调度 */
  128   1          vTaskStartScheduler();
  129   1      
  130   1          /* 正常情况下不会运行到此处 */
  131   1          while (1){};
  132   1      }
  133          void motorInit(void){
  134   1        STBY_6612 = 1;
  135   1        AIN1_6612 = 0;
  136   1        AIN2_6612 = 0;
  137   1        BIN1_6612 = 0;
  138   1        BIN2_6612 = 0;
  139   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       235     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        46     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
